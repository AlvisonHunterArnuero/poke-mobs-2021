{"version":3,"sources":["context/DataProvider.js","routes.js","components/Spinner.jsx","App.js","reportWebVitals.js","index.js"],"names":["PokeDataContext","createContext","DataProvider","children","useState","pokemonsCollection","setPokemonsCollection","getAPIResults","a","RandomId","Math","floor","random","fetch","fetchedDataResults","json","res_JSON","console","log","Provider","value","Pokedeck","React","lazy","routes","path","exact","name","component","Spinner","className","type","disabled","viewBox","App","fallback","map","route","idx","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"0LACaA,EAAkBC,0BA2BhBC,IAxBI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,SACpB,EAAoDC,mBAAS,IAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KAEOC,EAAa,uCAAG,gCAAAC,EAAA,6DACfC,EAAWC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GAD7B,SAEYC,MAAM,qCAAD,OACCJ,IAHlB,cAEfK,EAFe,gBAKAA,EAAmBC,OALnB,cAKjBC,EALiB,OAMrBC,QAAQC,IAAI,MAAOF,GACnBV,EAAsBU,GAPD,kBAQdA,GARc,4CAAH,qDAWpB,OACE,cAAChB,EAAgBmB,SAAjB,CACEC,MAAO,CACLf,qBAAoBC,wBAAuBC,iBAF/C,SAKGJ,M,6JCvBDkB,G,MAAWC,IAAMC,MAAK,kBAAM,iCAkCnBC,EA7BA,CACd,CACCC,KAAM,IACNC,OAAO,EACPC,KAAM,UACNC,UATcN,IAAMC,MAAK,kBAAM,iCAWhC,CACCE,KAAM,YACNC,OAAO,EACPC,KAAM,WACNC,UAAWP,GAeT,CAAEI,KAAM,IAAKC,OAAO,EAAMC,KAAM,iBAAkBC,UAAWP,I,OChCpDQ,EAAU,WACnB,OACE,qBAAKC,UAAU,mCAAf,SACF,yBAAQC,KAAK,SAASD,UAAU,qCAAqCE,UAAQ,EAA7E,UACI,qBAAKF,UAAU,4BAA4BG,QAAQ,cADvD,mBCgCWC,MA5Bf,WACE,OACE,cAAChC,EAAA,EAAD,UACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUiC,SAAU,cAAC,EAAD,IAApB,SACE,cAAC,IAAD,UACGX,EAAOY,KAAI,SAACC,EAAOC,GAClB,OACED,EAAMT,WACJ,cAAC,IAAD,CAEEH,KAAMY,EAAMZ,KACZC,MAAOW,EAAMX,MACbC,KAAMU,EAAMV,KACZY,OAAQ,SAACC,GACP,OAAO,cAACH,EAAMT,UAAP,eAAqBY,MALzBF,eCLVG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASX,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7ffcba89.chunk.js","sourcesContent":["import React, {createContext, useState} from 'react';\nexport const PokeDataContext = createContext();\n\n\nconst DataProvider=({ children }) =>{\n  const [pokemonsCollection, setPokemonsCollection] = useState([]);\n   // API fetch event to retrieve the data needed on this component\n   const getAPIResults = async () => {\n    const RandomId = Math.floor(Math.random() * 806 + 1)\n    const fetchedDataResults = await fetch(\n      `https://pokeapi.co/api/v2/pokemon/${RandomId}`\n    );\n    let res_JSON = await fetchedDataResults.json();\n    console.log(\"==>\", res_JSON);\n    setPokemonsCollection(res_JSON);\n    return res_JSON;\n  };\n\n  return (\n    <PokeDataContext.Provider\n      value={{\n        pokemonsCollection, setPokemonsCollection, getAPIResults\n      }}\n    >\n      {children}\n    </PokeDataContext.Provider>\n  );\n}\nexport default DataProvider;","import React from \"react\";\nconst Pokedeck = React.lazy(() => import(\"./components/Pokedeck\"));\nconst Welcome = React.lazy(() => import(\"./components/Welcome\"));\n// const MovieResults = React.lazy(() => import(\"./components/MovieResults\"));\n// const Movie = React.lazy(() => import(\"./components/Movie\"));\n\nconst routes = [\n\t{\n\t\tpath: \"/\",\n\t\texact: true,\n\t\tname: \"Welcome\",\n\t\tcomponent: Welcome,\n\t},\n\t{\n\t\tpath: \"/pokedeck\",\n\t\texact: true,\n\t\tname: \"Pokedeck\",\n\t\tcomponent: Pokedeck,\n\t},\n\n\t// {\n\t// \tpath: \"/movies\",\n\t// \texact: true,\n\t// \tname: \"Movies\",\n\t// \tcomponent: MovieResults,\n\t// },\n\t// {\n\t// \tpath: \"/movies/:imdbID\",\n\t// \texact: true,\n\t// \tname: \"Movie Details\",\n\t// \tcomponent: Movie,\n\t// },\n    { path: \"*\", exact: true, name: \"Page Not Found\", component: Pokedeck },\n];\n\nexport default routes;","export const Spinner = () => {\n    return (\n      <div className=\"grid place-items-center h-screen\">\n    <button type='button' className='bg-transparent text-white text-2xl' disabled>\n        <svg className='animate-spin h-5 w-5 mr-3' viewBox='0 0 24 24'></svg>\n        Loading...\n      </button>\n  </div>\n    \n    );\n  };\n  ","import React, { Suspense } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport DataProvider from \"./context/DataProvider\";\nimport \"./App.css\";\nimport routes from \"./routes\";\nimport { Spinner } from \"./components/Spinner\";\n\nfunction App() {\n  return (\n    <DataProvider>\n      <Router>\n        <Suspense fallback={<Spinner />}>\n          <Switch>\n            {routes.map((route, idx) => {\n              return (\n                route.component && (\n                  <Route\n                    key={idx}\n                    path={route.path}\n                    exact={route.exact}\n                    name={route.name}\n                    render={(props) => {\n                      return <route.component {...props} />;\n                    }}\n                  />\n                )\n              );\n            })}\n          </Switch>\n        </Suspense>\n      </Router>\n    </DataProvider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}